#include "imports/stdlib.fc";

forall X -> tuple tset(tuple t, int k, X x) asm(t x k) "SETINDEXVAR";
forall X -> (tuple, ()) ~tset(tuple t, int k, X x) asm(t x k) "SETINDEXVAR";
forall X -> tuple tuples::tsetq(tuple t, int k, X x) asm(t x k) "SETINDEXVARQ";
forall X -> (tuple, ()) ~tsetq(tuple t, int k, X x) asm(t x k) "SETINDEXVARQ";
forall X -> (int) tuples::is_tuple(X t) asm "ISTUPLE";

forall X -> (tuple, X) tpop(tuple t) asm "TPOP";
(int) tlen (tuple t) asm "TLEN";
int tuples::tlenq(tuple t) asm "QTLEN";
forall X -> (tuple) to_tuple (X x) asm "NOP";

forall X -> X g(tuple t, int k) asm(t k) "INDEXVAR";
forall X -> tuple s(tuple t, int k, X x) asm(t x k) "SETINDEXVAR";

;; (slice, (int)) load_digit (slice s)  {
;;     int x = s~load_uint(8); ;; load 8 bits (one char) from slice
;;     x -= 48; ;; char '0' has code of 48, so we substract it to get the digit as a number
;;     return (s, (x)); ;; return our modified slice and loaded digit
;; }

;; () iterate_tuple (tuple t) impure {
;;     repeat (t.tuple_length()) {
;;         var value = t~tpop();
;;         if (is_tuple(value)) {
;;             tuple tuple_value = cast_to_tuple(value);
;;             iterate_tuple(tuple_value);
;;         }
;;         else {
;;             if(value > max_value) {
;;                 max_value = value;
;;             }
;;         }
;;     }
;; }

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

;; int BFS(Node start, Node target) {
;;     Queue<Node> q; // 核心数据结构
;;     Set<Node> visited; // 避免走回头路
    
;;     q.offer(start); // 将起点加入队列
;;     visited.add(start);

;;     while (q not empty) {
;;         int sz = q.size();
;;         /* 将当前队列中的所有节点向四周扩散 */
;;         for (int i = 0; i < sz; i++) {
;;             Node cur = q.poll();
;;             /* 划重点：这里判断是否到达终点 */
;;             if (cur is target)
;;                 return step;
;;             /* 将 cur 的相邻节点加入队列 */
;;             for (Node x : cur.adj()) {
;;                 if (x not in visited) {
;;                     q.offer(x);
;;                     visited.add(x);
;;                 }
;;             }
;;         }
;;     }
;;     // 如果走到这里，说明在图中没有找到目标节点
;; }

int one(int x, int y) inline {
    return x * 100 + y;
}

(int, int) point(int xy) inline {
    return (xy / 100, xy % 100);
}

(int, int) point_move(int xy, int dx, int dy) inline {
    return (xy / 100 + dx, xy % 100 + dy);
}

(tuple, int) ~unshift(tuple queue) inline {
    tuple t2 = empty_tuple();
    int fst = queue.first();
    repeat (queue.tlen() - 1) {
        t2~tpush(queue~tpop());
    }
    return (t2, fst);
}

int get?(cell dict, int key_len, int index) inline {
    (slice step_slice, int success) = dict.udict_get?(key_len, index);
    if(~ success) {
        return 0;
    }
    int step = step_slice~load_uint(256);
    return step;
}

tuple attach(tuple originMaze, tuple queue, cell visited, int backStep) inline {
    backStep -= 1;
     repeat (queue.tlen() - 1) {
        int xy = queue~tpop();
        int thisStep = visited.get?(72, xy);
        if(thisStep == backStep) {
            (int x, int y) = point(xy);
            originMaze~tset(x, originMaze.g(x).tset(y, 33));
            backStep -= 1;
        }
    }
    return originMaze;
}

int is_nearby(int xy1, int xy2) inline {
    (int x1, int y1) = point(xy1);
    (int x2, int y2) = point(xy2);
    int dx = x1 - x2;
    int dy = y1 - y2;
    return (dx <= 1) & (dx >= -1) & (dy >= -1) & (dy <= 1);
}

int combine(int stone, int prob, int step) inline {
    return stone * 1000000 + prob * 1000 + step;
}

(int, int, int) split(int num) inline {
    return (num / 1000000, (num / 1000) % 1000, num % 1000);
}

tuple attachIndex(tuple originMaze, tuple path, cell visited, int backStep) inline {
    int prexy = path~tpop();
    backStep -= 1;
     repeat (path.tlen() - 1) {
        int xy = path~tpop();
        (int stone, int prob, int step) = split(visited.get?(72, xy));
        (int x, int y) = point(xy);
        if((step == backStep) & is_nearby(prexy, xy)) {
            originMaze~tset(x, originMaze.g(x).tset(y, 33));
            prexy = xy;
            backStep -= 1;
        }
    }
    return originMaze;
}


;; S 83  E69 X88  .46  ?63 !33
(int, int, int, tuple) solve(int n, int m, tuple maze) method_id {
    tuple dx = to_tuple([1, 0, -1, 0, 1, -1, -1, 1]);
    tuple dy = to_tuple([0, 1, 0, -1, -1, 1, -1, 1]);
    int S = null();
    int E = null();

    int findN = 0; 
    while(findN < n) {
        tuple line = maze.g(findN);
        int findM = 0;
        while(findM < m) {
             if(line.g(findM) == 83) {
                S = one(findN, findM);
            }
            if(line.g(findM) == 69) {
                E = one(findN, findM);
            }
            findM += 1;
        }
        findN += 1;
    }

    {  
        tuple queue = empty_tuple();
        tuple path = empty_tuple();
        cell visited = new_dict();
        queue~tpush(S);
        visited~udict_set_builder(72, S, begin_cell().store_uint(0, 256));
        while(queue.tlen() != 0) {
            int cur = queue~unshift();
            (int x, int y) = point(cur);
            int c = maze.g(x).g(y);
            if(c == 69) { ;; E
                (int stone, int prob, int step) = split(visited.get?(72, cur));
                path~tpush(cur);
                return (-1, 0, step, attachIndex(maze, path, visited, step));
            }
            int dIndex = 0;

            while(dIndex < 8) {
                (int nx, int ny) = point_move(cur, dx.g(dIndex), dy.g(dIndex)); ;; 新坐标
                if ((0 <= nx) & (nx < n) & ( 0 <= ny) & (ny < m)) { ;; 迷宫内的坐标

                    int p = one(nx, ny);
                    var (_, success) = visited.udict_get?(72, p);
                    if(~ success) {
                        int character = maze.g(nx).g(ny);
                        if((character == 46) | (character == 69)) { ;; . E
                            queue~tpush(p);
                            path~tpush(cur);
                            (int stone, int prob, int step) = split(visited.get?(72, cur));
                            visited~udict_set_builder(72, p, begin_cell().store_uint(combine(stone,prob,step + 1), 256));
                        }
                    }

                } 
                dIndex += 1;
            }
        }
    }


    {  
        tuple queue = empty_tuple();
        tuple path = empty_tuple();
        cell visited = new_dict();
        queue~tpush(S);
        visited~udict_set_builder(72, S, begin_cell().store_uint(0, 256));
        while(queue.tlen() != 0) {
            int cur = queue~unshift();
            (int x, int y) = point(cur);
            int c = maze.g(x).g(y);
            if(c == 69) { ;; E
                (int stone, int prob, int step) = split(visited.get?(72, cur));
                path~tpush(cur);
                return (-1, prob - 1, step, attachIndex(maze, path, visited, step));
            }
            int dIndex = 0;

            while(dIndex < 8) {
                (int nx, int ny) = point_move(cur, dx.g(dIndex), dy.g(dIndex)); ;; 新坐标
                if ((0 <= nx) & (nx < n) & ( 0 <= ny) & (ny < m)) { ;; 迷宫内的坐标

                    int p = one(nx, ny);
                    var (_, success) = visited.udict_get?(72, p);
                    if(~ success) {
                        int character = maze.g(nx).g(ny);
                        if((character == 46) | (character == 69)) { ;; . E
                            queue~tpush(p);
                            path~tpush(cur);
                            (int stone, int prob, int step) = split(visited.get?(72, cur));
                            visited~udict_set_builder(72, p, begin_cell().store_uint(combine(stone,prob,step + 1), 256));
                        } elseif(character == 63) { ;;?
                            queue~tpush(p);
                            path~tpush(cur);
                            (int stone, int prob, int step) = split(visited.get?(72, cur));
                            visited~udict_set_builder(72, p, begin_cell().store_uint(combine(stone,prob + 1,step + 1), 256));
                        }
                    }

                } 
                dIndex += 1;
            }
        }
    }

    return (-1, 0, 0, null());
    ;; return (-1, maze.g(0).g(2), maze.g(0).g(3), maze);
}