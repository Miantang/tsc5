#include "imports/stdlib.fc";

forall X -> tuple tset(tuple t, int k, X x) asm(t x k) "SETINDEXVAR";
forall X -> (tuple, ()) ~tset(tuple t, int k, X x) asm(t x k) "SETINDEXVAR";
forall X -> tuple tuples::tsetq(tuple t, int k, X x) asm(t x k) "SETINDEXVARQ";
forall X -> (tuple, ()) ~tsetq(tuple t, int k, X x) asm(t x k) "SETINDEXVARQ";
forall X -> (int) tuples::is_tuple(X t) asm "ISTUPLE";

forall X -> (tuple, X) tpop(tuple t) asm "TPOP";
(int) tlen (tuple t) asm "TLEN";
int tuples::tlenq(tuple t) asm "QTLEN";
forall X -> (tuple) to_tuple (X x) asm "NOP";

forall X -> X g(tuple t, int k) asm(t k) "INDEXVAR";
forall X -> tuple s(tuple t, int k, X x) asm(t x k) "SETINDEXVAR";


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

int one(int x, int y) inline {
    return x * 100 + y;
}

(int, int) point(int xy) inline {
    return (xy / 100, xy % 100);
}

(int, int) point_move(int xy, int dx, int dy) inline {
    return (xy / 100 + dx, xy % 100 + dy);
}


int get?(cell dict, int key_len, int index) inline {
    (slice step_slice, int success) = dict.udict_get?(key_len, index);
    if(~ success) {
        return -2;
    }
    int step = step_slice~load_uint(40);
    return step;
}

tuple attach(tuple originMaze, cell come_from, int startxy, int endxy) inline {
    int pointer = endxy;
    int n = 0;
    do {
        (slice xy_slice, int success) = come_from.udict_get?(16, pointer);
        int xy = xy_slice~load_uint(16);
        (int x, int y) = point(xy);
        if((xy != 3636) & (xy != startxy)) {
            originMaze~tset(x, originMaze.g(x).tset(y, 33));
        }
        pointer = xy;
    } until (pointer == 3636);

    return originMaze;
}

int is_nearby(int xy1, int xy2) inline {
    (int x1, int y1) = point(xy1);
    (int x2, int y2) = point(xy2);
    int dx = x1 - x2;
    int dy = y1 - y2;
    return (dx <= 1) & (dx >= -1) & (dy >= -1) & (dy <= 1);
}

int combine(int stone, int prob, int step, int xy, int endxy) inline {
    ;; 当前点到 终点的最近距离 Chebyshev distance
    (int x, int y) = point(xy);
    (int endx, int endy) = point(endxy);
    int dis = max(max(x, endx) - min(x, endx), max(y, endy - min(y, endy)));
    ;; return step * 1000000000 + prob * 1000000 + stone * 1000 + (xy / 10 + (xy % 100));
    return  stone * 1000000000 + prob * 1000000 + step * 1000 + dis;
}

(int, int, int) split(int num) inline {
    ;; return ((num / 1000) % 1000,  (num / 1000000) % 1000, num / 1000000000);
    return (num / 1000000000, (num / 1000000) % 1000, (num / 1000) % 1000);
}

(tuple, int) ~unshiftIter(tuple queue, cell visited) inline {
    tuple t2 = empty_tuple();
    int nowMinItem = queue.first();
    int minCost = visited.get?(16, nowMinItem);
    repeat (queue.tlen() - 1) {
        int item = queue~tpop();
        int cost = visited.get?(16, item);

        if(minCost > cost) {
            t2~tpush(nowMinItem);
            minCost = cost;
            nowMinItem = item;
        } else {
            t2~tpush(item);
        }
    }
    return (t2, nowMinItem);
}

;; S 83  E69 X88  .46  ?63 !33
(int, int, int, tuple) solve(int n, int m, tuple maze) method_id {
    tuple dx = to_tuple([0, -1, -1, -1, 0, 1, 1, 1]);
    tuple dy = to_tuple([1, 1, 0, -1, -1, -1, 0, 1]);
    int S = null();
    int E = null();

    ;; 47405gas
    int findN = 0; 
    while(findN < n) {
        tuple line = maze.g(findN);
        int findM = 0;
        while(findM < m) {
            int char = line.g(findM);
             if(char == 83) {
                S = one(findN, findM);
            }
            if(char == 69) {
                E = one(findN, findM);
            }
            findM += 1;
        }
        findN += 1;
    }

    {  
        tuple queue = empty_tuple();
        cell visited = new_dict();
        cell come_from = new_dict();
        ;; cell visited_pair = new_dict();
        queue~tpush(S);
        visited~udict_set_builder(16, S, begin_cell().store_uint(combine(0, 0, 0, S, E), 40));
        come_from~udict_set_builder(16, S, begin_cell().store_uint(3636, 16));

        while(queue.tlen() != 0) {
            ;; int cur = queue~unshift();
            int cur = queue~unshiftIter(visited);
            (int x, int y) = point(cur);
            int c = maze.g(x).g(y);
            if(c == 69) { ;; E
                (int stone, int prob, int step) = split(visited.get?(16, cur));
                return (stone, prob, step, attach(maze, come_from, S, E));
            }

            int dIndex = 0;
            while(dIndex < 8) {
                (int nx, int ny) = point_move(cur, dx.g(dIndex), dy.g(dIndex)); ;; 新坐标
                if ((0 <= nx) & (nx < n) & ( 0 <= ny) & (ny < m)) { ;; 迷宫内的坐标

                    int p = one(nx, ny);
                    int character = maze.g(nx).g(ny);

                    int currentCost = visited.get?(16, cur);
                    (int stone, int prob, int step) = split(currentCost);
                    int nextWillCost = combine(stone + (character == 88 ? 1 : 0), prob + (character == 63 ? 1 : 0), step + 1, p, E);

                    int nextCost = visited.get?(16, p); 
                    
                    if((nextCost == -2) | (nextWillCost < nextCost)) { ;; nextCost == -2 表示 not success
                        if((character == 46) | (character == 69) | (character == 63) | (character == 88)) { ;; . E
                            queue~tpush(p);
                            come_from~udict_set_builder(16, p, begin_cell().store_uint(cur, 16));
                            visited~udict_set_builder(16, p, begin_cell().store_uint(nextWillCost, 40));
                        }
                    }

                }
                dIndex += 1;
            }
        }
    }

    return (0, 0, 0, null());
}