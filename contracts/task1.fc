#include "imports/stdlib.fc";

const UPDATE = 0x9df10277;
const CLAIM = 0xbb4be234;

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
}

() recv_external(slice in_msg) impure {
    int op = in_msg~load_uint(32);

    if(op == UPDATE) {
        var signature = in_msg~load_bits(512); ;; get signature from the message body
        var cs = in_msg;
        var (locked_for, new_seqno) = (cs~load_uint(32), cs~load_uint(32));  ;; get rest values from the message body
        var ds = get_data().begin_parse(); ;; get data from storage and convert it into a slice to be able to read values
        var (public_key, execution_time, receiver, seqno) = (ds~load_uint(256), ds~load_uint(32),ds.load_msg_addr(), ds~load_uint(32)); ;; read values from storage
        ds.end_parse(); ;; make sure we do not have anything in ds variable

        throw_if(119, new_seqno != seqno + 1);
        throw_unless(120, check_signature(slice_hash(in_msg), signature, public_key));
        throw_if(122, execution_time < now());
        throw_if(123, now() + locked_for < execution_time);
        accept_message();
        set_data(begin_cell()
            .store_uint(execution_time + locked_for, 32)
            .store_uint(seqno + 1, 32)
           .end_cell());
    }

    if(op == CLAIM) {
        throw_if(124, execution_time < now());
    }

    throw(0xffff);
}

int get_seqno() method_id {
    slice ds = get_data().begin_parse().skip_bits(256 + 32 + 256);
    int total = ds~load_uint(32);
    return total;
}
int get_execution_time() method_id {
    slice ds = get_data().begin_parse().skip_bits(256);
    int total = ds~load_uint(32);
    return total;
}