#include "imports/stdlib.fc";

(slice) get_serialized_address(int address) inline {
    return (begin_cell()
        ;; .store_uint(2, 2)  ;; Is std address
        ;; .store_uint(0, 1)  ;; Non-unicast
        ;; .store_uint(workchain, 8)  ;; Basic workchain
        .store_uint(1024, 11)
        .store_uint(address, 256) ;; Address hash
    ).end_cell().begin_parse();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg) impure {
    if (in_msg.slice_bits() < 32) { ;; ignore empty messages
        return ();
    }
    ;; var (op, query_id) = (in_msg~load_uint(64));
    var op = in_msg~load_uint(32);
    var ds = get_data().begin_parse(); ;; get data from storage and convert it into a slice to be able to read values
    var admin_address = ds~load_msg_addr();
    cell users = ds~load_dict();

    var cs = in_msg_full.begin_parse();
    var flags = cs~load_uint(4);
 
    slice sender_address = cs~load_msg_addr();

    if(op == 0x368ddef3) {
        throw_if(120, ~ equal_slices(sender_address, admin_address));
        
        ;; throw_if(122, users.dict_empty?());
        in_msg~load_uint(64);
        slice addressInt = in_msg~load_msg_addr();
        int share = in_msg~load_uint(32);
        (int workchain, int addressHash) = parse_std_addr(addressInt);
        users~udict_set_builder(256, addressHash, begin_cell().store_uint(share, 32)); ;;udict_set_builder

        set_data(begin_cell()
            .store_slice(admin_address) ;; destination address
            .store_dict(users)
           .end_cell());
        return ();
    }

    if(op == 0x278205c8) {
        throw_if(120, ~ equal_slices(sender_address, admin_address));
        in_msg~load_uint(64);
        slice addressInt = in_msg~load_msg_addr();
        (int workchain, int addressHash) = parse_std_addr(addressInt);
         
        throw_if(122, users.dict_empty?());
        int success? = users~udict_delete?(256, addressHash);
        throw_unless(121, success?);
         set_data(begin_cell()
            .store_slice(admin_address) ;; destination address
            .store_dict(users)
           .end_cell());
        return ();
    }

    if(op == 0x068530b3) {
        throw_if(122, users.dict_empty?());
        ;; throw_if(120, ~ equal_slices(sender_address, admin_address));
       (int key, slice val, int success) = users.udict_get_min?(256);
        int total_share = val~load_uint(32);
        while (success) {
            ;; do something with pair key->val
            (key, val, success) = users.udict_get_next?(256, key);
            if (success) {
                int share = val~load_uint(32);
                total_share += share;
            }
        }
       {
            (int key, slice val, int success) = users.udict_get_min?(256);

            do {
                 if (success) {
                    int share = val~load_uint(32);
                    int ton_to_send = muldiv(share, msg_value, total_share);
                     cell msg = begin_cell()
                        .store_uint(0x18, 6) ;; flags
                        .store_slice(get_serialized_address(key)) ;; destination address
                        .store_coins(ton_to_send) 
                        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; default message headers (see sending messages page)
                    .end_cell();
                    send_raw_message(msg, 1);
                }
                (key, val, success) = users.udict_get_next?(256, key);
            } until( ~ success);
       }

        return ();
    }
    ;; https://github.com/romanovichim/TonFunClessons_Eng/blob/main/lessons/smartcontract/9lesson/ninthlesson.md
    if(op == 0x7362d09c) {
        throw_if(122, users.dict_empty?());
        int query_id = in_msg~load_uint(64);
        int amount = in_msg~load_coins();

        (int key, slice val, int success) = users.udict_get_min?(256);
        int total_share = val~load_uint(32);
        while (success) {
            ;; do something with pair key->val
            total_share += val~load_uint(32);
            (key, val, success) = users.udict_get_next?(256, key);
        }

       {
         (int key, slice val, int success) = users.udict_get_min?(256);
        while(success) {
            slice userAddr = get_serialized_address(key);
                int share = val~load_uint(32);
                int jetton_amount = muldiv(share, amount, total_share);

                var msg_body = begin_cell()
                    .store_uint(0x0f8a7ea5, 32)
                    .store_uint(query_id, 64)
                    .store_coins(jetton_amount)
                    .store_slice(userAddr) ;; owner_address
                    .store_slice(userAddr)  ;;response_address
                    .store_uint(0, 1) ;; custom_payload
                    .store_coins(1) ;; forward_ton_amount
                    .store_uint(0, 1); ;; either_forward_payload

                var transfer_msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(sender_address)
                    .store_coins(20000000)
                    .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .store_ref(msg_body.end_cell());
                
                send_raw_message(transfer_msg.end_cell(), 1); ;; revert on errors

            (key, val, success) = users.udict_get_next?(256, key);
        }
       }

        return ();
    }

   return ();
}


cell get_users() method_id {
    var ds = get_data().begin_parse().skip_bits(267); ;; get data from storage and convert it into a slice to be able to read values
    ;; ds~load_msg_addr();
    ;; int epyt = ds~load_uint(1);
    return ds~load_dict();
    ;; return ds.preload_dict();
}

int get_user_share(slice user_address) method_id {
    var ds = get_data().begin_parse(); ;; get data from storage and convert it into a slice to be able to read values
    ds~load_msg_addr();
    var users = ds~load_dict();
    (_, int addressHash) = parse_std_addr(user_address);
    (slice share_s, _) = users.udict_get?(256, addressHash);
    return share_s~load_uint(32);
    ;; return 1;
}
