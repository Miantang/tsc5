#include "imports/stdlib.fc";

const ADDUSER = 0x368ddef3;
const REMOVEUSER = 0x278205c8;
const SPLIT = 0x68530b3;
const TRANSFER = 0x7362d09c;

slice parse_sender_address (cell in_msg_full) inline {
    var cs = in_msg_full.begin_parse();
    var flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();
    return sender_address;
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg) impure {
    var (op, query_id) = (in_msg~load_uint(32), in_msg~load_uint(64));

    var ds = get_data().begin_parse(); ;; get data from storage and convert it into a slice to be able to read values
    var (admin_address, users) = (ds~load_msg_addr(), ds~load_dict()); ;; read values from storage

    if(op == ADDUSER) {
        slice addressInt = in_msg~load_msg_addr();
        int share = in_msg~load_uint(32);
        (int workchain, int addressHash) = parse_std_addr(addressInt);
        ;; slice address =  begin_cell().store_uint(addressHash, 256).end_cell().begin_parse();
        slice sender_address = parse_sender_address(in_msg_full);
        throw_unless(120, equal_slices(sender_address, admin_address));
        users~udict_set_builder(256, addressHash, begin_cell().store_uint(share, 32)); ;;udict_set_builder
        set_data(begin_cell()
            .store_slice(admin_address) ;; destination address
            .store_dict(users)
           .end_cell());
        return ();
    }

    if(op == REMOVEUSER) {
        slice addressInt = in_msg~load_msg_addr();
        (int workchain, int addressHash) = parse_std_addr(addressInt);
        ;; slice address =  begin_cell().store_uint(addressHash, 256).end_cell().begin_parse();
        slice sender_address = parse_sender_address(in_msg_full);
        throw_unless(120, equal_slices(sender_address, admin_address));
        int success? = users~udict_delete?(256, addressHash);
        throw_unless(121, success?);
         set_data(begin_cell()
            .store_slice(admin_address) ;; destination address
            .store_dict(users)
           .end_cell());
        return ();
    }

    if(op == SPLIT) {
        throw_if(122, users.dict_empty?());
        return ();
    }

    if(op == TRANSFER) {
        throw_if(122, users.dict_empty?());
        return ();
    }
    

   return ();
}


cell get_users() method_id {
    var ds = get_data().begin_parse(); ;; get data from storage and convert it into a slice to be able to read values
    slice addr = ds~load_msg_addr();
    return ds.preload_dict();
}

int get_user_share(slice user_address) method_id {
    var ds = get_data().begin_parse(); ;; get data from storage and convert it into a slice to be able to read values
    ds~load_msg_addr();
    cell dict = ds~load_dict();
    (int workchain, int addressHash) = parse_std_addr(user_address);
    ;; slice address =  begin_cell().store_uint(addressHash, 256).end_cell().begin_parse();
    ;; var (dict, a, share_s, success) = dict.udict_get?(256, address);
    var (share_s, success) = dict.udict_get?(256, addressHash);
    int share = share_s~load_uint(32);
    return share;
}

