#include "imports/stdlib.fc";

forall X -> tuple tset(tuple t, int k, X x) asm(t x k) "SETINDEXVAR";
forall X -> (tuple, ()) ~tset(tuple t, int k, X x) asm(t x k) "SETINDEXVAR";
forall X -> (int) tuples::is_tuple(X t) asm "ISTUPLE";
forall X -> (tuple, X) tpop(tuple t) asm "TPOP";
(int) tlen (tuple t) asm "TLEN";
forall X -> (tuple) to_tuple (X x) asm "NOP";

forall X -> X g(tuple t, int k) asm(t k) "INDEXVAR";
forall X -> tuple s(tuple t, int k, X x) asm(t x k) "SETINDEXVAR";

(slice, int) u_get?(cell dict, int key_len, int index) asm(index dict key_len) "DICTUGET";

() recv_internal(slice in_msg_body) impure {

}

int one(int x, int y) inline {
    return x + y * 100;
}

(int, int) point(int xy) inline {
    return (xy % 100, xy / 100);
}

(int, int) point_move(int xy, int dx, int dy) inline {
    return (xy % 100 + dx, xy / 100 + dy);
}


int get?(cell dict, int key_len, int index) inline {
    (slice step_slice, int success) = dict.udict_get?(key_len, index);
    if(~ success) {
        return -2;
    }
    ;; (_, int step) = step_slice.skip_bits(12).load_uint(32);
    (_, int step) = step_slice.load_uint(44);
    return step & 0xffffffff; ;;
    ;; (slice x, int m) = dict.u_get?(key_len, index);
    ;; if(m != 0) {
    ;;     ;; (_, int step) = step_slice.skip_bits(12).load_uint(32);
    ;;     (_, int step) = x.load_uint(41);
    ;;     step = step & 0x1fffffff; ;;
    ;;     return step;
    ;; }
    ;; return -2;
    
}

tuple attach(tuple originMaze, cell come_from, int startxy, int endxy) inline {
    int pointer = endxy;
    int n = 0;
    do {
        (slice xy_slice, int success) = come_from.udict_get?(12, pointer);
        int xy = xy_slice~load_uint(12);
        (int x, int y) = point(xy);
        if((xy != 3636) & (xy != startxy)) {
            originMaze~tset(x, originMaze.g(x).tset(y, 33));
        }
        pointer = xy;
    } until (pointer == 3636);

    return originMaze;
}

int combine(int stone, int prob, int step, int xy, int endxy) inline {
    ;; 当前点到 终点的最近距离 Chebyshev distance
    (int x, int y) = point(xy);
    (int endx, int endy) = point(endxy);
    int dx = endx - x;
    int dy = endy - y;
    if(dx < 0) {
        dx = - dx;
    }
    if(dy < 0) {
        dy = - dx;
    }
    int dis = max(dx, dy); ;; gas 26
    ;; int dis = max(max(x, endx) - min(x, endx), max(y, endy - min(y, endy))); ;; gas 26 * 5
    return  stone * 100000000 + prob * 1000000 + step * 1000 + dis * 10;
    ;; return  stone * 10000000 + prob * 100000 + step * 100 + dis;
}

(int, int, int) split(int num) inline {
    return (num / 100000000, (num / 1000000) % 100, (num / 1000) % 100);
    ;; return (num / 10000000, (num / 100000) % 100, (num / 100) % 100);
}

(tuple, int) ~unshiftIter(tuple queue, cell visited) inline {
    tuple t2 = empty_tuple();
    int nowMinItem = queue.first();
    int minCost = visited.get?(12, nowMinItem);
    repeat (queue.tlen() - 1) {
        int item = queue~tpop();
        int cost = visited.get?(12, item);

        if(minCost > cost) {
            t2~tpush(nowMinItem);
            minCost = cost;
            nowMinItem = item;
        } else {
            t2~tpush(item);
        }
    }
    return (t2, nowMinItem);
}

(cell, int) ~unshiftmin(cell dict) inline {
    (int cost, slice xy_slice, int success) = dict~udict::delete_get_min(32);
    if(~ success) {
        return (dict, 0);
    }
    (_, int xy) = xy_slice.load_uint(12);
    return (dict, xy);
}

;; S 83  E69 X88  .46  ?63 !33
(int, int, int, tuple) solve(int n, int m, tuple maze) method_id {
    ;; set_gas_limit(1208925819614629174706176);
    set_gas_limit(18446744073709552000);
    tuple dx = to_tuple([1, 1, 0, -1, -1, -1, 0, 1]);
    tuple dy = to_tuple([0, -1, -1, -1, 0, 1, 1, 1]);
    int S = null();
    int E = null();

    ;; 40405gas
    int findN = 0; 
    int findedS = 0;
    int findedE = 0;
    while(((findedS != -1) | (findedE != -1)) & (findN < n)) {
        tuple line = maze.g(findN);
        int findM = 0;
        while(((findedS != -1) | (findedE != -1)) & (findM < m)) {
            int char = line.g(findM);
             if(char == 83) {
                S = one(findN, findM);
                findedS = -1;
            }
            if(char == 69) {
                E = one(findN, findM);
                findedE = -1;
            }
            findM += 1;
        }
        findN += 1;
    }

    ;; tuple queue = to_tuple([S]);
    cell queue_dict = new_dict();
    cell come_from = new_dict();
    int cost = combine(0, 0, 0, S, E);
    come_from~udict_set_builder(12, S, begin_cell().store_uint(3636, 12).store_uint(cost, 32));
    queue_dict~udict_set_builder(32, cost, begin_cell().store_uint(S, 12));

    ;; while(queue.tlen() != 0) {
    ;;     int cur = queue~unshiftIter(come_from);
    while(~ queue_dict.dict_empty?()) {
        int cur = queue_dict~unshiftmin();
        (int x, int y) = point(cur);
        int c = maze.g(x).g(y);
        if(c == 69) { ;; E
            (int stone, int prob, int step) = split(come_from.get?(12, cur));
            return (stone, prob, step, attach(maze, come_from, S, E));
        }

        int dIndex = 0;
        while(dIndex < 8) {
            (int nx, int ny) = point_move(cur, dx.g(dIndex), dy.g(dIndex)); ;; 新坐标
            if ((0 <= nx) & (nx < n) & ( 0 <= ny) & (ny < m)) { ;; 迷宫内的坐标

                int p = one(nx, ny);
                int character = maze.g(nx).g(ny);

                (int stone, int prob, int step) = split(come_from.get?(12, cur));
                int nextWillCost = combine(stone + (character == 88 ? 1 : 0), prob + (character == 63 ? 1 : 0), step + 1, p, E);

                int nextCost = come_from.get?(12, p); 
                
                if((nextCost == -2) | (nextWillCost < nextCost)) { ;; nextCost == -2 表示 not success
                    if((character == 46) | (character == 69) | (character == 63) | (character == 88)) { ;; . E
                        ;; queue~tpush(p);
                        int nextWillCost_withIndex = nextWillCost;
                        int added = queue_dict~udict_add_builder?(32, nextWillCost_withIndex, begin_cell().store_uint(p, 12));
                        while(~ added) {
                            nextWillCost_withIndex += 1;
                            added = queue_dict~udict_add_builder?(32, nextWillCost_withIndex, begin_cell().store_uint(p, 12));
                        }
                        ;; queue_dict~udict_set_builder(32, nextWillCost, begin_cell().store_uint(p, 12));
                        come_from~udict_set_builder(12, p, begin_cell().store_uint(cur, 12).store_uint(nextWillCost, 32));
                    }
                }

            }
            dIndex += 1;
        }
    }

    return (0, 0, 0, null());
}