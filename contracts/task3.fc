#include "imports/stdlib.fc";

;; All the code in recv_internal, get_storage, wrap_storage, and version
;; serves as an example of the intended structure.

;; The provided code is an "empty wrapper." It:
;; + Parses "wrapped" incoming messages (discards versioning information)
;; + "Wraps" the call to the version-specific process_message
;; + Implements "get_storage" for version-specific get-methods
;; However, it does not yet implement any upgrade logic, which is your task.

;; The empty wrapper is provided to demonstrate
;; how version-specific code is intended to be "wrapped" and interacted with.
;; You may delete and rewrite as needed,
;; but the final implementation must adhere to the same structure


() recv_internal(int msg_value, int balance, cell in_msg_full, slice in_msg_body) impure {
    ;; set_gas_limit(18446744073709552000);
    if(in_msg_body.slice_bits() < 32) {
        return ();
    }
    int expected_version = in_msg_body~load_uint(32);

    cell new_code = in_msg_body~load_maybe_ref();
    cell migrations = in_msg_body~load_dict(); 
    cell payload = in_msg_body~load_ref();


    if(expected_version == 0) {  
        ;; throw_if(200, new_code.cell_null?());
        ;; if(~ new_code.cell_null?()) {
        ;;     set_c3(new_code.begin_parse().bless());
        ;;     set_code(new_code);
        ;; }

        slice ds = get_data().begin_parse();
        cell storage = ds~load_ref();
        ;; ~dump(storage);
        storage = process_message(storage, msg_value, balance, in_msg_full, payload.begin_parse());
        set_data(wrap_storage(1, storage, new_dict())); 
        return ();
    }


    ;; var new_code = null();
    ;; if(in_msg_body~load_uint(1) == 1) {
    ;;     new_code = in_msg_body~load_ref();
    ;; }

    slice ds = get_data().begin_parse();
    int current_version = ds~load_uint(32);
    ;; ~dump(current_version);
    throw_if(200, expected_version < current_version);

    if(expected_version > current_version) {

        throw_if(200, new_code.cell_null?());
        throw_if(200, migrations.dict_empty?());
        
        (slice cur_migration_payload, int cur_success) = migrations.udict_get?(32, current_version);
        throw_unless(400, cur_success);
        ;; throw_if(400, cur_migration_payload.slice_empty?());
        ;; throw_if(400, cur_migration_payload.slice_refs_empty?());
        (int new_version, var migration_code) = (cur_migration_payload~load_uint(32), cur_migration_payload~load_maybe_ref());
        cell storage = ds~load_ref();


        do {
            if(~ migration_code.cell_null?()) {
                set_c3(migration_code.begin_parse().bless());
                set_code(migration_code);
                
                storage = migrate_one(storage);
            }


            (cur_migration_payload, cur_success)  = migrations.udict_get?(32, new_version);
            ;; throw_if(400, cur_migration_payload.slice_empty?());
            ;; throw_if(400, cur_migration_payload.slice_refs_empty?());
            if(cur_success) {
                (new_version, migration_code) = (cur_migration_payload~load_uint(32), cur_migration_payload~load_maybe_ref());
            } else {
                ;; throw_if(200, new_version != expected_version);
                ;; new_version = expected_version;
            }
        } until((~ cur_success) | (expected_version == new_version));

        if(new_version == expected_version) {
            set_c3(begin_parse(new_code).bless());
            set_code(new_code);
            cell dict = ds~load_dict();
            dict~udict_set_ref(32, expected_version, new_code);

            storage = process_message(storage, msg_value, balance, in_msg_full, payload.begin_parse());
            set_data(wrap_storage(expected_version, storage, dict));
        }
        return ();
    
    }

    ;; ---
    ;; here you should check if it's the first call or not based on `expected_version` as stated in the task
    ;; if it is the first call, wrap the storage and finish execution by returning from the function
    ;; ---

   
    if(expected_version == current_version) {
        if(~ new_code.cell_null?()) {
            set_c3(new_code.begin_parse().bless());
            set_code(new_code);
        }

        cell storage = ds~load_ref();
        cell dict = ds~load_dict();
        cell new_code_f = dict.udict_get_ref?(32,expected_version);
        
        if(~ new_code_f.cell_null?()) {
            set_c3(new_code_f.begin_parse().bless());
            set_code(new_code_f);
        }
        
        storage = process_message(storage, msg_value, balance, in_msg_full, payload.begin_parse());
        ;; ~dump(storage);
        set_data(wrap_storage(current_version, storage, dict)); ;; -2 is just a random placeholder for the version
        return ();
    }

    return ();
}



cell get_storage() {
    slice cs = get_data().begin_parse().skip_bits(32);
    ;; Logic to extract the storage on which the version-specific process_message and get-methods operate
    cell storage = cs~load_ref();

    return storage;
}

;; cell wrap_storage(int version_id, cell storage) {
cell wrap_storage(int version_id, cell storage, cell dict) {
    ;; add additional data required for versioning in this cell
    return begin_cell()
        .store_uint(version_id, 32)
        .store_ref(storage)
        .store_dict(dict)
    .end_cell();
}

;; Return the current version of the smart contract
int version() method_id {
    slice ds = get_data().begin_parse();
    return ds~load_uint(32);
}

cell teststorage() method_id {
     return get_storage();
}
cell testdict() method_id {
      slice ds = get_data().begin_parse();
      ds~load_ref();
      return ds~load_dict();
}

;; <<<<< Custom version-specific code begins
;; This section (everything between << and >> characters) will be fully substituted for each version.
;; This is an IMPORTANT part, and these exact lines with <<<<< and >>>>> must be present in your code for the testing system to work correctly.
;; All the code provided here serves as an example of the version-code, which your update code must be compatible with.
;; Refer to the "3-example" directory for more version examples.

;; from counter-v0.fc
cell process_message(cell storage, int msg_value, int balance, cell in_msg_full, slice in_msg_body) impure {
    slice cs = storage.begin_parse();
    int current_amount = cs.preload_uint(32);
    ~dump(current_amount);
    return begin_cell().store_uint(current_amount + 1, 32).end_cell();
}

cell migrate_one(cell old_storage) { ;; it's just a placeholder that is required for correct compilation
    return old_storage;
}

;; Custom version-specific code ends >>>>>
